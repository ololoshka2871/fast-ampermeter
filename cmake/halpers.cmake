FUNCTION(STM32_GET_FAMITY_X CHIP FAMILY_X)
    SET(re "^[sS][tT][mM]32(....).(.)")
    STRING(REGEX REPLACE ${re} "\\1" STM32_SERIES ${CHIP})
    STRING(REGEX REPLACE ${re} "\\2" STM32_SIZE_CODE ${CHIP})
    STRING(TOUPPER ${STM32_SERIES} STM32_SERIES)
    STRING(TOUPPER ${STM32_SIZE_CODE} STM32_SIZE_CODE)

    set(${FAMILY_X} STM32${STM32_SERIES}x${STM32_SIZE_CODE} PARENT_SCOPE)
    set(${FAMILY_X}_nosizecode STM32${STM32_SERIES}xx PARENT_SCOPE)
ENDFUNCTION()

MACRO(STM32_UPDATE_DEFAULTS)
	IF(NOT STM32_FLASH_ORIGIN)
        SET(STM32_FLASH_ORIGIN "0x08000000")
    ENDIF()

    IF(NOT STM32_RAM_ORIGIN)
        SET(STM32_RAM_ORIGIN "0x20000000")
    ENDIF()

    IF(NOT STM32_MIN_STACK_SIZE)
        SET(STM32_MIN_STACK_SIZE "0x200")
    ENDIF()

    IF(NOT STM32_MIN_HEAP_SIZE)
        SET(STM32_MIN_HEAP_SIZE "0")
    ENDIF()

    IF(NOT STM32_CCRAM_ORIGIN)
        SET(STM32_CCRAM_ORIGIN "0x10000000")
    ENDIF()

    IF(NOT STM32_CCRAM_SIZE)
        SET(STM32_CCRAM_SIZE "64K")
    ENDIF()
ENDMACRO()

FUNCTION(STM32_FILL_LD_TEMPLATE LD_SCRIPT_IN LD_SCRIPT_OUT)
    STM32_UPDATE_DEFAULTS()
    
    STM32_GET_CHIP_PARAMETERS(${STM32_CHIP}
        STM32_FLASH_SIZE STM32_RAM_SIZE CC_RAM_SIZE)

    include(stm32_linker_F4)
    configure_file(${LD_SCRIPT_IN} ${LD_SCRIPT_OUT} @ONLY)
ENDFUNCTION()

FUNCTION(STM32_SET_TARGET_LD_SPEC TARGET SPEC)
    get_target_property(TARGET_LD_FLAGS ${TARGET} LINK_FLAGS)
    if (TARGET_LD_FLAGS)
        SET(TARGET_LD_FLAGS "${TARGET_LD_FLAGS} --specs=${SPEC}")
    else()
        SET(TARGET_LD_FLAGS "--specs=${SPEC}")
    endif()
    SET_TARGET_PROPERTIES(${TARGET} PROPERTIES LINK_FLAGS ${TARGET_LD_FLAGS})
ENDFUNCTION()

FUNCTION(STM32_SET_LD_SCRIPT TARGET LD_SCRIPT)
    GET_TARGET_PROPERTY(TARGET_LD_FLAGS ${TARGET} LINK_FLAGS)
    IF(TARGET_LD_FLAGS)
        SET(TARGET_LD_FLAGS "\"-T${LD_SCRIPT}\" ${TARGET_LD_FLAGS}")
    ELSE()
        SET(TARGET_LD_FLAGS "\"-T${LD_SCRIPT}\"")
    ENDIF()
    SET_TARGET_PROPERTIES(${TARGET} PROPERTIES LINK_FLAGS ${TARGET_LD_FLAGS})
ENDFUNCTION()

################################################################################

FUNCTION(STM32_GET_FLASH_PAGE_SIZE CHIP OUT_VAR)
    if (NOT STM32Cube_FOUND)
        message(FATAL "No Stm32Cube provided, execute find_package(STM32Cube) before running this function!")
    endif()

    STM32_GET_FAMITY_X(${CHIP} STM32_FAMILY_X)
    SET(STM32_FAMILY_LONG STM32${STM32_FAMILY})
    SET(STM32_FAMILY_LONG_x STM32${STM32_FAMILY}xx)
    STRING(TOLOWER ${STM32_FAMILY_LONG} STM32_FAMILY_LONG_l)
    SET(STM32_FAMILY_LONG_lx ${STM32_FAMILY_LONG_l}xx)

    if ((STM32_FAMILY STREQUAL "F3") OR (STM32_FAMILY STREQUAL "F1"))
        set(include_to_search_in
            "${STM32Cube}/Drivers/${STM32_FAMILY_LONG_x}_HAL_Driver/Inc/${STM32_FAMILY_LONG_lx}_hal_flash_ex.h")
    elseif(STM32_FAMILY STREQUAL "L4")
        set(include_to_search_in
            "${STM32Cube}/Drivers/${STM32_FAMILY_LONG_x}_HAL_Driver/Inc/${STM32_FAMILY_LONG_lx}_hal_flash.h")
    endif()

    file(GLOB file ${include_to_search_in})
    list(GET file 0 file)

    # -DA=3,-DB=1234,-DFOO
    set(CMAKE_REQUIRED_DEFINITIONS
        -D${STM32_FAMILY_X}
        -D${STM32_FAMILY_X_nosizecode}
    )
    set(CMAKE_REQUIRED_INCLUDES
        ${STM32Cube}/Drivers/CMSIS/Include
        ${STM32Cube}/Drivers/CMSIS/Device/ST/${STM32_FAMILY_LONG_x}/Include
    )

    GET_MACRO_VALUE(FLASH_PAGE_SIZE ${file} FLASH_PAGE_SIZE)
    set(${OUT_VAR} ${FLASH_PAGE_SIZE} PARENT_SCOPE)
ENDFUNCTION()
